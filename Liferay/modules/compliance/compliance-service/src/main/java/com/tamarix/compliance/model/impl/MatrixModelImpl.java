/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tamarix.compliance.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.tamarix.compliance.model.Matrix;
import com.tamarix.compliance.model.MatrixModel;
import com.tamarix.compliance.model.MatrixSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Matrix service. Represents a row in the &quot;Compliance_Matrix&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MatrixModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MatrixImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MatrixImpl
 * @generated
 */
@JSON(strict = true)
public class MatrixModelImpl
	extends BaseModelImpl<Matrix> implements MatrixModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a matrix model instance should use the <code>Matrix</code> interface instead.
	 */
	public static final String TABLE_NAME = "Compliance_Matrix";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"applicationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createdby", Types.BIGINT}, {"modifiedby", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"applicationType", Types.VARCHAR},
		{"applicationCategory", Types.VARCHAR},
		{"responsibleActor", Types.VARCHAR},
		{"responsibleActor2", Types.VARCHAR}, {"backupActor", Types.VARCHAR},
		{"backupActor2", Types.VARCHAR}, {"approver", Types.VARCHAR},
		{"approver2", Types.VARCHAR}, {"backupApprover", Types.VARCHAR},
		{"backupApprover2", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdby", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedby", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("applicationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("responsibleActor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("responsibleActor2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("backupActor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("backupActor2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approver", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approver2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("backupApprover", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("backupApprover2", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Compliance_Matrix (uuid_ VARCHAR(75) null,applicationId LONG not null primary key,groupId LONG,companyId LONG,createdby LONG,modifiedby VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,applicationType VARCHAR(75) null,applicationCategory VARCHAR(75) null,responsibleActor VARCHAR(75) null,responsibleActor2 VARCHAR(75) null,backupActor VARCHAR(75) null,backupActor2 VARCHAR(75) null,approver VARCHAR(75) null,approver2 VARCHAR(75) null,backupApprover VARCHAR(75) null,backupApprover2 VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Compliance_Matrix";

	public static final String ORDER_BY_JPQL =
		" ORDER BY matrix.applicationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Compliance_Matrix.applicationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.tamarix.compliance.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.tamarix.compliance.model.Matrix"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.tamarix.compliance.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.tamarix.compliance.model.Matrix"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.tamarix.compliance.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.tamarix.compliance.model.Matrix"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long APPLICATIONID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Matrix toModel(MatrixSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Matrix model = new MatrixImpl();

		model.setUuid(soapModel.getUuid());
		model.setApplicationId(soapModel.getApplicationId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreatedby(soapModel.getCreatedby());
		model.setModifiedby(soapModel.getModifiedby());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setApplicationType(soapModel.getApplicationType());
		model.setApplicationCategory(soapModel.getApplicationCategory());
		model.setResponsibleActor(soapModel.getResponsibleActor());
		model.setResponsibleActor2(soapModel.getResponsibleActor2());
		model.setBackupActor(soapModel.getBackupActor());
		model.setBackupActor2(soapModel.getBackupActor2());
		model.setApprover(soapModel.getApprover());
		model.setApprover2(soapModel.getApprover2());
		model.setBackupApprover(soapModel.getBackupApprover());
		model.setBackupApprover2(soapModel.getBackupApprover2());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Matrix> toModels(MatrixSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Matrix> models = new ArrayList<Matrix>(soapModels.length);

		for (MatrixSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.tamarix.compliance.service.util.ServiceProps.get(
			"lock.expiration.time.com.tamarix.compliance.model.Matrix"));

	public MatrixModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _applicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _applicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Matrix.class;
	}

	@Override
	public String getModelClassName() {
		return Matrix.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Matrix, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Matrix, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Matrix, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Matrix)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Matrix, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Matrix, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Matrix)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Matrix, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Matrix, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Matrix>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Matrix.class.getClassLoader(), Matrix.class, ModelWrapper.class);

		try {
			Constructor<Matrix> constructor =
				(Constructor<Matrix>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Matrix, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Matrix, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Matrix, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Matrix, Object>>();
		Map<String, BiConsumer<Matrix, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Matrix, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(Matrix matrix, Object uuidObject) {
					matrix.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"applicationId",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getApplicationId();
				}

			});
		attributeSetterBiConsumers.put(
			"applicationId",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(Matrix matrix, Object applicationIdObject) {
					matrix.setApplicationId((Long)applicationIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(Matrix matrix, Object groupIdObject) {
					matrix.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(Matrix matrix, Object companyIdObject) {
					matrix.setCompanyId((Long)companyIdObject);
				}

			});
		attributeGetterFunctions.put(
			"createdby",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getCreatedby();
				}

			});
		attributeSetterBiConsumers.put(
			"createdby",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(Matrix matrix, Object createdbyObject) {
					matrix.setCreatedby((Long)createdbyObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedby",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getModifiedby();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedby",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(Matrix matrix, Object modifiedbyObject) {
					matrix.setModifiedby((String)modifiedbyObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(Matrix matrix, Object createDateObject) {
					matrix.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(Matrix matrix, Object modifiedDateObject) {
					matrix.setModifiedDate((Date)modifiedDateObject);
				}

			});
		attributeGetterFunctions.put(
			"applicationType",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getApplicationType();
				}

			});
		attributeSetterBiConsumers.put(
			"applicationType",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(
					Matrix matrix, Object applicationTypeObject) {

					matrix.setApplicationType((String)applicationTypeObject);
				}

			});
		attributeGetterFunctions.put(
			"applicationCategory",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getApplicationCategory();
				}

			});
		attributeSetterBiConsumers.put(
			"applicationCategory",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(
					Matrix matrix, Object applicationCategoryObject) {

					matrix.setApplicationCategory(
						(String)applicationCategoryObject);
				}

			});
		attributeGetterFunctions.put(
			"responsibleActor",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getResponsibleActor();
				}

			});
		attributeSetterBiConsumers.put(
			"responsibleActor",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(
					Matrix matrix, Object responsibleActorObject) {

					matrix.setResponsibleActor((String)responsibleActorObject);
				}

			});
		attributeGetterFunctions.put(
			"responsibleActor2",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getResponsibleActor2();
				}

			});
		attributeSetterBiConsumers.put(
			"responsibleActor2",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(
					Matrix matrix, Object responsibleActor2Object) {

					matrix.setResponsibleActor2(
						(String)responsibleActor2Object);
				}

			});
		attributeGetterFunctions.put(
			"backupActor",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getBackupActor();
				}

			});
		attributeSetterBiConsumers.put(
			"backupActor",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(Matrix matrix, Object backupActorObject) {
					matrix.setBackupActor((String)backupActorObject);
				}

			});
		attributeGetterFunctions.put(
			"backupActor2",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getBackupActor2();
				}

			});
		attributeSetterBiConsumers.put(
			"backupActor2",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(Matrix matrix, Object backupActor2Object) {
					matrix.setBackupActor2((String)backupActor2Object);
				}

			});
		attributeGetterFunctions.put(
			"approver",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getApprover();
				}

			});
		attributeSetterBiConsumers.put(
			"approver",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(Matrix matrix, Object approverObject) {
					matrix.setApprover((String)approverObject);
				}

			});
		attributeGetterFunctions.put(
			"approver2",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getApprover2();
				}

			});
		attributeSetterBiConsumers.put(
			"approver2",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(Matrix matrix, Object approver2Object) {
					matrix.setApprover2((String)approver2Object);
				}

			});
		attributeGetterFunctions.put(
			"backupApprover",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getBackupApprover();
				}

			});
		attributeSetterBiConsumers.put(
			"backupApprover",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(Matrix matrix, Object backupApproverObject) {
					matrix.setBackupApprover((String)backupApproverObject);
				}

			});
		attributeGetterFunctions.put(
			"backupApprover2",
			new Function<Matrix, Object>() {

				@Override
				public Object apply(Matrix matrix) {
					return matrix.getBackupApprover2();
				}

			});
		attributeSetterBiConsumers.put(
			"backupApprover2",
			new BiConsumer<Matrix, Object>() {

				@Override
				public void accept(
					Matrix matrix, Object backupApprover2Object) {

					matrix.setBackupApprover2((String)backupApprover2Object);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getApplicationId() {
		return _applicationId;
	}

	@Override
	public void setApplicationId(long applicationId) {
		_applicationId = applicationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getCreatedby() {
		return _createdby;
	}

	@Override
	public void setCreatedby(long createdby) {
		_createdby = createdby;
	}

	@JSON
	@Override
	public String getModifiedby() {
		if (_modifiedby == null) {
			return "";
		}
		else {
			return _modifiedby;
		}
	}

	@Override
	public void setModifiedby(String modifiedby) {
		_modifiedby = modifiedby;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getApplicationType() {
		if (_applicationType == null) {
			return "";
		}
		else {
			return _applicationType;
		}
	}

	@Override
	public void setApplicationType(String applicationType) {
		_applicationType = applicationType;
	}

	@JSON
	@Override
	public String getApplicationCategory() {
		if (_applicationCategory == null) {
			return "";
		}
		else {
			return _applicationCategory;
		}
	}

	@Override
	public void setApplicationCategory(String applicationCategory) {
		_applicationCategory = applicationCategory;
	}

	@JSON
	@Override
	public String getResponsibleActor() {
		if (_responsibleActor == null) {
			return "";
		}
		else {
			return _responsibleActor;
		}
	}

	@Override
	public void setResponsibleActor(String responsibleActor) {
		_responsibleActor = responsibleActor;
	}

	@JSON
	@Override
	public String getResponsibleActor2() {
		if (_responsibleActor2 == null) {
			return "";
		}
		else {
			return _responsibleActor2;
		}
	}

	@Override
	public void setResponsibleActor2(String responsibleActor2) {
		_responsibleActor2 = responsibleActor2;
	}

	@JSON
	@Override
	public String getBackupActor() {
		if (_backupActor == null) {
			return "";
		}
		else {
			return _backupActor;
		}
	}

	@Override
	public void setBackupActor(String backupActor) {
		_backupActor = backupActor;
	}

	@JSON
	@Override
	public String getBackupActor2() {
		if (_backupActor2 == null) {
			return "";
		}
		else {
			return _backupActor2;
		}
	}

	@Override
	public void setBackupActor2(String backupActor2) {
		_backupActor2 = backupActor2;
	}

	@JSON
	@Override
	public String getApprover() {
		if (_approver == null) {
			return "";
		}
		else {
			return _approver;
		}
	}

	@Override
	public void setApprover(String approver) {
		_approver = approver;
	}

	@JSON
	@Override
	public String getApprover2() {
		if (_approver2 == null) {
			return "";
		}
		else {
			return _approver2;
		}
	}

	@Override
	public void setApprover2(String approver2) {
		_approver2 = approver2;
	}

	@JSON
	@Override
	public String getBackupApprover() {
		if (_backupApprover == null) {
			return "";
		}
		else {
			return _backupApprover;
		}
	}

	@Override
	public void setBackupApprover(String backupApprover) {
		_backupApprover = backupApprover;
	}

	@JSON
	@Override
	public String getBackupApprover2() {
		if (_backupApprover2 == null) {
			return "";
		}
		else {
			return _backupApprover2;
		}
	}

	@Override
	public void setBackupApprover2(String backupApprover2) {
		_backupApprover2 = backupApprover2;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Matrix.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Matrix.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Matrix toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Matrix>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MatrixImpl matrixImpl = new MatrixImpl();

		matrixImpl.setUuid(getUuid());
		matrixImpl.setApplicationId(getApplicationId());
		matrixImpl.setGroupId(getGroupId());
		matrixImpl.setCompanyId(getCompanyId());
		matrixImpl.setCreatedby(getCreatedby());
		matrixImpl.setModifiedby(getModifiedby());
		matrixImpl.setCreateDate(getCreateDate());
		matrixImpl.setModifiedDate(getModifiedDate());
		matrixImpl.setApplicationType(getApplicationType());
		matrixImpl.setApplicationCategory(getApplicationCategory());
		matrixImpl.setResponsibleActor(getResponsibleActor());
		matrixImpl.setResponsibleActor2(getResponsibleActor2());
		matrixImpl.setBackupActor(getBackupActor());
		matrixImpl.setBackupActor2(getBackupActor2());
		matrixImpl.setApprover(getApprover());
		matrixImpl.setApprover2(getApprover2());
		matrixImpl.setBackupApprover(getBackupApprover());
		matrixImpl.setBackupApprover2(getBackupApprover2());

		matrixImpl.resetOriginalValues();

		return matrixImpl;
	}

	@Override
	public int compareTo(Matrix matrix) {
		long primaryKey = matrix.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Matrix)) {
			return false;
		}

		Matrix matrix = (Matrix)obj;

		long primaryKey = matrix.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		MatrixModelImpl matrixModelImpl = this;

		matrixModelImpl._originalUuid = matrixModelImpl._uuid;

		matrixModelImpl._originalGroupId = matrixModelImpl._groupId;

		matrixModelImpl._setOriginalGroupId = false;

		matrixModelImpl._originalCompanyId = matrixModelImpl._companyId;

		matrixModelImpl._setOriginalCompanyId = false;

		matrixModelImpl._setModifiedDate = false;

		matrixModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Matrix> toCacheModel() {
		MatrixCacheModel matrixCacheModel = new MatrixCacheModel();

		matrixCacheModel.uuid = getUuid();

		String uuid = matrixCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			matrixCacheModel.uuid = null;
		}

		matrixCacheModel.applicationId = getApplicationId();

		matrixCacheModel.groupId = getGroupId();

		matrixCacheModel.companyId = getCompanyId();

		matrixCacheModel.createdby = getCreatedby();

		matrixCacheModel.modifiedby = getModifiedby();

		String modifiedby = matrixCacheModel.modifiedby;

		if ((modifiedby != null) && (modifiedby.length() == 0)) {
			matrixCacheModel.modifiedby = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			matrixCacheModel.createDate = createDate.getTime();
		}
		else {
			matrixCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			matrixCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			matrixCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		matrixCacheModel.applicationType = getApplicationType();

		String applicationType = matrixCacheModel.applicationType;

		if ((applicationType != null) && (applicationType.length() == 0)) {
			matrixCacheModel.applicationType = null;
		}

		matrixCacheModel.applicationCategory = getApplicationCategory();

		String applicationCategory = matrixCacheModel.applicationCategory;

		if ((applicationCategory != null) &&
			(applicationCategory.length() == 0)) {

			matrixCacheModel.applicationCategory = null;
		}

		matrixCacheModel.responsibleActor = getResponsibleActor();

		String responsibleActor = matrixCacheModel.responsibleActor;

		if ((responsibleActor != null) && (responsibleActor.length() == 0)) {
			matrixCacheModel.responsibleActor = null;
		}

		matrixCacheModel.responsibleActor2 = getResponsibleActor2();

		String responsibleActor2 = matrixCacheModel.responsibleActor2;

		if ((responsibleActor2 != null) && (responsibleActor2.length() == 0)) {
			matrixCacheModel.responsibleActor2 = null;
		}

		matrixCacheModel.backupActor = getBackupActor();

		String backupActor = matrixCacheModel.backupActor;

		if ((backupActor != null) && (backupActor.length() == 0)) {
			matrixCacheModel.backupActor = null;
		}

		matrixCacheModel.backupActor2 = getBackupActor2();

		String backupActor2 = matrixCacheModel.backupActor2;

		if ((backupActor2 != null) && (backupActor2.length() == 0)) {
			matrixCacheModel.backupActor2 = null;
		}

		matrixCacheModel.approver = getApprover();

		String approver = matrixCacheModel.approver;

		if ((approver != null) && (approver.length() == 0)) {
			matrixCacheModel.approver = null;
		}

		matrixCacheModel.approver2 = getApprover2();

		String approver2 = matrixCacheModel.approver2;

		if ((approver2 != null) && (approver2.length() == 0)) {
			matrixCacheModel.approver2 = null;
		}

		matrixCacheModel.backupApprover = getBackupApprover();

		String backupApprover = matrixCacheModel.backupApprover;

		if ((backupApprover != null) && (backupApprover.length() == 0)) {
			matrixCacheModel.backupApprover = null;
		}

		matrixCacheModel.backupApprover2 = getBackupApprover2();

		String backupApprover2 = matrixCacheModel.backupApprover2;

		if ((backupApprover2 != null) && (backupApprover2.length() == 0)) {
			matrixCacheModel.backupApprover2 = null;
		}

		return matrixCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Matrix, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Matrix, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Matrix, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Matrix)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Matrix, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Matrix, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Matrix, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Matrix)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Matrix>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _applicationId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _createdby;
	private String _modifiedby;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _applicationType;
	private String _applicationCategory;
	private String _responsibleActor;
	private String _responsibleActor2;
	private String _backupActor;
	private String _backupActor2;
	private String _approver;
	private String _approver2;
	private String _backupApprover;
	private String _backupApprover2;
	private long _columnBitmask;
	private Matrix _escapedModel;

}